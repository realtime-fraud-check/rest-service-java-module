package com.sturdy.sturdymem.service;

import com.sturdy.sturdymem.dao.MyRepository;
import com.sturdy.sturdymem.dao.MyTransactionRepository;
import com.sturdy.sturdymem.entity.MyResource;
import com.sturdy.sturdymem.entity.MyTransactionResource;
import com.sturdy.sturdymem.util.SturdyHelper;
import org.bson.types.ObjectId;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.index.TextIndexDefinition;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.TextCriteria;
import org.springframework.data.mongodb.core.query.TextQuery;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

@Service
public class SturdyMemServiceImpl implements SturdyMemService {

    private Logger logger = LoggerFactory.getLogger(SturdyHelper.class);

    @Autowired
    private MyRepository myRepository;

    @Autowired
    private MyTransactionRepository myTransactionRepository;

    //TODO Revisit mongoTemplate. As of now all CRUD operations are taken care of by Repository Classes.
    //@Autowired
    //private MongoTemplate mongoTemplate;

    //TODO Revisit saveToDictionary

/*    @Override
    public void saveToDictionary(MultipartFile file) {
        //parse the file
        List<String> strings = SturdyHelper.parseFile(file);
        myRepository.save(new MyResource("MyDictionary",strings));
    }*/

//TODO Will revisit findIfTargetWordExists(String targetWord) and saveMyTransaction(MyTransactionResource myTransactionResource later.

    @Override
    public boolean findIfTargetWordExists(String targetWord) {
        return true;
/*        TextIndexDefinition textIndex = new TextIndexDefinition.TextIndexDefinitionBuilder()
                .onField("values", 2F)
                .build();
        mongoTemplate.indexOps(MyResource.class).ensureIndex(textIndex);

        TextCriteria criteria = TextCriteria.forDefaultLanguage()
                .matching(targetWord);

        Query query = TextQuery.queryText(criteria);
        logger.debug("About to search  for {}", targetWord);
        List<MyResource> searchResults = mongoTemplate.find(query, MyResource.class);
        logger.debug("searchResults retrieved {} ", searchResults);
        return null != searchResults && !searchResults.isEmpty();*/
    }

    @Override
    public boolean saveMyTransaction(MyTransactionResource myTransactionResource) {
        myTransactionRepository.save(myTransactionResource);

        return true;
    }

    @Override
    public MyTransactionResource fetchTransactionByTransId(String transId) {
        return myTransactionRepository.getByTransId(transId);
    }
    /**
     * Fetch transaction based on primary key _id (AutoGenerated by MongoDB)
     * TODO Refactor based on data model
     * */
    @Override
    public MyTransactionResource fetchTransactionById(ObjectId id){
        return myTransactionRepository.findById(id).orElse(null);
    }

    //TODO Will add update later.
    @Override
    public boolean updateMyTransaction(String transId,MyTransactionResource myTransactionResource) {
         myTransactionRepository.save(myTransactionResource);
         return  true ; //todo change this to conditional
    }
}
